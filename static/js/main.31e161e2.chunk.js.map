{"version":3,"sources":["card/card.component.jsx","card-list/card-list.component.jsx","seach-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","eachMember","id","name","Relationship","CardList","monstors","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchValue","console","log","fetch","then","response","json","users","setState","this","modifiedMonstors","filter","monstor","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAEaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,WAAWC,GAA7C,4BACxB,4BAAKL,EAAMI,WAAWE,MACtB,2BAAIN,EAAMI,WAAWG,iBCHhBC,EAAW,SAACR,GACrB,OAAO,yBAAKC,UAAY,aAElBD,EAAMS,SAASC,KAAI,SAAAN,GAAU,OAC3B,kBAAC,EAAD,CAAMO,IAAOP,EAAWC,GAAID,WAAcA,SCJzCQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BAAOb,UAAY,SACXc,KAAO,SACPF,YAAeA,EACnBG,SAAYF,MCgCLG,E,kDAhCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXT,SAAW,GACXU,YAAc,IAJJ,E,gEAQO,IAAD,OAClBC,QAAQC,IAAI,2BACZC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAClB,SAAWiB,S,+BAGnC,IAAD,SAE2BE,KAAKV,MAA/BT,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAAC,GAAO,OAC9CA,EAAQzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAK/B,UAAU,OACb,8CACD,kBAAC,EAAD,CAAWY,YAAc,kBACtBC,aAAiB,SAAAoB,GAAC,OAAI,EAAKP,SAAS,CAACR,YAAce,EAAEC,OAAOC,WAC9D,kBAAC,EAAD,CAAU3B,SAAYoB,S,GA5BZQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.31e161e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\nexport const Card = (props) => (\r\n    <div className = 'card-container' >\r\n        <img alt = 'monstor' src = {`https://robohash.org/${props.eachMember.id}?set=set2&size=180x180`} />\r\n        <h1>{props.eachMember.name}</h1>\r\n        <p>{props.eachMember.Relationship}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport {Card}  from '../card/card.component'\r\nexport const CardList = (props) => {\r\n    return <div className = 'card-list'>\r\n        {\r\n          props.monstors.map(eachMember => (\r\n            <Card key = {eachMember.id} eachMember = {eachMember} />\r\n          ))\r\n        }\r\n    </div>\r\n}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className = 'search' \r\n            type = 'Search' \r\n            placeholder = {placeholder} \r\n        onChange = {handleChange} />\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './card-list/card-list.component';\nimport { SearchBox } from './seach-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      monstors : [],\n      searchValue : ''\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"Component Mounted!!!!!!\")\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monstors : users}))\n  }\n\n  render() {\n\n    const { monstors, searchValue } = this.state\n    const modifiedMonstors = monstors.filter(monstor => \n      monstor.name.toLowerCase().includes(searchValue.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Place</h1>\n       <SearchBox placeholder = 'Search Monsters'\n          handleChange = {(e => this.setState({searchValue : e.target.value}))}/>  \n        <CardList monstors = {modifiedMonstors}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import FamilyApp from './FamilyApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}